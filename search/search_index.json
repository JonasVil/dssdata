{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DSSData A python module for organizing data from electrical distribution systems modeled on OpenDSS . Mode support: Static and Time-series Installation We strongly recommend the use of virtual environments manager. Using pip pip install git+https://github.com/felipemarkson/power-flow-analysis Using poetry poetry add git+https://github.com/felipemarkson/power-flow-analysis Contributors: JonasVil","title":"Home"},{"location":"#dssdata","text":"A python module for organizing data from electrical distribution systems modeled on OpenDSS . Mode support: Static and Time-series","title":"DSSData"},{"location":"#installation","text":"We strongly recommend the use of virtual environments manager.","title":"Installation"},{"location":"#using-pip","text":"pip install git+https://github.com/felipemarkson/power-flow-analysis","title":"Using pip"},{"location":"#using-poetry","text":"poetry add git+https://github.com/felipemarkson/power-flow-analysis Contributors: JonasVil","title":"Using poetry"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2020 Felipe Markson dos Santos Monteiro Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"api/","text":"API Reference SystemClass The distribution system abstraction class. dss property readonly The instance of OpenDSSDirect.py . dsscontent: List [ str ] property writable The OpenDSS commands of the .dss file in [path][dssdata.SystemClass.path]. As well, you can change the list of commands. Returns: Type Description List[str] OpenDSS commands. error: str property readonly Returns: Type Description str The error of the last OpenDSS command. kV: Iterable [ float ] property readonly Returns: Type Description Iterable[float] The base voltages. See voltagebases in OpenDSS User Manual . loadmult: float property readonly Returns: Type Description float The load multiplier. See loadmult in OpenDSS User Manual .. name: str property readonly Returns: Type Description str The name of the distribution system. path: str property readonly Returns: Type Description str The path of the .dss file. __init__ ( self , * , path , kV , loadmult = 1 ) special Parameters: Name Type Description Default path str The path to the file that describes the distribution system. required kV Iterable[float] The base voltages. See voltagebases in OpenDSS User Manual . required loadmult float The load multiplier. See loadmult in OpenDSS User Manual . 1 cfg_system ( self ) Configure the base voltages and load multiplier get_all_bus_names ( self ) Returns: Type Description List[str] All bus names of the distribution systems. get_all_lines_names ( self ) Returns: Type Description List[str] All line names of the distribution systems. get_all_regs_names ( self ) Returns: Type Description List[str] All regulator names of the distribution systems. init_sys ( self ) Run the commands in [dsscontent][dssdata.SystemClass.dsscontent]. run_command ( self , cmd ) Run a comand on OpenDSS. Parameters: Name Type Description Default cmd str A OpenDSS command. required Exceptions: Type Description Exception If the command is invalid. decorators special pf_tools ( func ) See Create your tools . Parameters: Name Type Description Default func <built-in function callable> A tool function required Returns: Type Description <built-in function callable> The return of the tool function pfmodes special build_dataset_tspf ( distSys , * , funcs_list , num_steps ) Build the datas of tools functions returns on time series mode. See The main concept . Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass] required funcs_list Iterable[<built-in function callable>] Tools functions. required num_steps int Number of time steps. required Returns: Type Description Tuple[pandas.core.frame.DataFrame] [type]: Tools functions returns cfg_tspf ( distSys , step_size = '1h' , initial_time = ( 0 , 0 )) Set the time series mode in the distribution system. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass] required step_size str The size of step time. See \"Stepsize\" in OpenDSS User Manual . '1h' initial_time tuple See \"Time\" in OpenDSS User Manual . (0, 0) run_static_pf ( distSys ) Run the static power flow mode. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass] required tools special lines special get_all_infos ( distSys ) Get some relevant infos from all lines. See [get_infos][dssdata.tools.lines.get_infos]. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass] required Returns: Type Description DataFrame All lines infos get_infos ( distSys , names ) Get some relevant infos from lines. Ex: name bus1 ph_bus1 bus2 ph_bus2 I(A)_bus1_ph_a I(A)_bus1_ph_b I(A)_bus1_ph_c I(A)_bus2_ph_a I(A)_bus2_ph_b I(A)_bus2_ph_c ang_bus1_ph_a ang_bus1_ph_b ang_bus1_ph_c ang_bus2_ph_a ang_bus2_ph_b ang_bus2_ph_c kw_losses kvar_losses emergAmps normAmps perc_NormAmps perc_EmergAmps 0 650632 rg60 abc 632 abc 562.609 419.029 591.793 562.61 419.03 591.794 -28.7 -141.3 93.4 151.3 38.7 -86.6 60.737 196.015 600.0 400.0 1.479 0.986 1 632670 632 abc 670 abc 481.916 218.055 480.313 481.916 218.055 480.313 -27.2 -135.2 99.6 152.8 44.8 -80.4 12.991 41.495 600.0 400.0 1.205 0.803 2 670671 670 abc 671 abc 473.795 188.824 424.942 473.795 188.824 424.942 -27.0 -132.6 101.3 153.0 47.4 -78.7 22.729 72.334 600.0 400.0 1.184 0.79 Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass]. required names List[str] Lines names. required Returns: Type Description DataFrame Lines infos. regs special get_all_taps_number ( distSys ) Get the tap number of all regulators. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass]. required Returns: Type Description DataFrame The tap number of all regulators. get_tap_number ( distSys , names ) Get the tap number of regulators. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass]. required names List[str] Regulators names required Returns: Type Description DataFrame The tap number of regulators. voltages special get_all ( distSys ) Get line to neutral voltages (module and angle) in p.u. and phases configuration from buses. See [get_from_buses][dssdata.tools.voltages.get_from_buses]. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass]. required Returns: Type Description DataFrame [type]: Line to neutral voltages (module and angle) in p.u. and phases configuration from buses. get_from_buses ( distSys , buses ) Get line to neutral voltages (module and angle) in p.u. and phases configuration from buses. bus_name v_pu_a v_pu_b v_pu_c ang_a ang_b ang_c phases 0 sourcebus 0.99997 0.99999 0.99995 30.0 -90.0 150.0 abc 1 646 NaN 1.01803 1.00026 NaN -122.0 117.8 bc 2 611 NaN NaN 0.96083 NaN NaN 115.7 c 3 652 0.97533 NaN NaN -5.3 NaN NaN a Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass]. required buses List[str] Buses names. required Returns: Type Description DataFrame [type]: Line to neutral voltages (module and angle) in p.u. and phases configuration from buses.","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API Reference"},{"location":"api/#dssdata","text":"","title":"dssdata"},{"location":"api/#dssdata.SystemClass","text":"The distribution system abstraction class.","title":"SystemClass"},{"location":"api/#dssdata.SystemClass.dss","text":"The instance of OpenDSSDirect.py .","title":"dss"},{"location":"api/#dssdata.SystemClass.dsscontent","text":"The OpenDSS commands of the .dss file in [path][dssdata.SystemClass.path]. As well, you can change the list of commands. Returns: Type Description List[str] OpenDSS commands.","title":"dsscontent"},{"location":"api/#dssdata.SystemClass.error","text":"Returns: Type Description str The error of the last OpenDSS command.","title":"error"},{"location":"api/#dssdata.SystemClass.kV","text":"Returns: Type Description Iterable[float] The base voltages. See voltagebases in OpenDSS User Manual .","title":"kV"},{"location":"api/#dssdata.SystemClass.loadmult","text":"Returns: Type Description float The load multiplier. See loadmult in OpenDSS User Manual ..","title":"loadmult"},{"location":"api/#dssdata.SystemClass.name","text":"Returns: Type Description str The name of the distribution system.","title":"name"},{"location":"api/#dssdata.SystemClass.path","text":"Returns: Type Description str The path of the .dss file.","title":"path"},{"location":"api/#dssdata.SystemClass.__init__","text":"Parameters: Name Type Description Default path str The path to the file that describes the distribution system. required kV Iterable[float] The base voltages. See voltagebases in OpenDSS User Manual . required loadmult float The load multiplier. See loadmult in OpenDSS User Manual . 1","title":"__init__()"},{"location":"api/#dssdata.SystemClass.cfg_system","text":"Configure the base voltages and load multiplier","title":"cfg_system()"},{"location":"api/#dssdata.SystemClass.get_all_bus_names","text":"Returns: Type Description List[str] All bus names of the distribution systems.","title":"get_all_bus_names()"},{"location":"api/#dssdata.SystemClass.get_all_lines_names","text":"Returns: Type Description List[str] All line names of the distribution systems.","title":"get_all_lines_names()"},{"location":"api/#dssdata.SystemClass.get_all_regs_names","text":"Returns: Type Description List[str] All regulator names of the distribution systems.","title":"get_all_regs_names()"},{"location":"api/#dssdata.SystemClass.init_sys","text":"Run the commands in [dsscontent][dssdata.SystemClass.dsscontent].","title":"init_sys()"},{"location":"api/#dssdata.SystemClass.run_command","text":"Run a comand on OpenDSS. Parameters: Name Type Description Default cmd str A OpenDSS command. required Exceptions: Type Description Exception If the command is invalid.","title":"run_command()"},{"location":"api/#dssdata.decorators","text":"","title":"decorators"},{"location":"api/#dssdata.decorators.pf_tools","text":"See Create your tools . Parameters: Name Type Description Default func <built-in function callable> A tool function required Returns: Type Description <built-in function callable> The return of the tool function","title":"pf_tools()"},{"location":"api/#dssdata.pfmodes","text":"","title":"pfmodes"},{"location":"api/#dssdata.pfmodes.build_dataset_tspf","text":"Build the datas of tools functions returns on time series mode. See The main concept . Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass] required funcs_list Iterable[<built-in function callable>] Tools functions. required num_steps int Number of time steps. required Returns: Type Description Tuple[pandas.core.frame.DataFrame] [type]: Tools functions returns","title":"build_dataset_tspf()"},{"location":"api/#dssdata.pfmodes.cfg_tspf","text":"Set the time series mode in the distribution system. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass] required step_size str The size of step time. See \"Stepsize\" in OpenDSS User Manual . '1h' initial_time tuple See \"Time\" in OpenDSS User Manual . (0, 0)","title":"cfg_tspf()"},{"location":"api/#dssdata.pfmodes.run_static_pf","text":"Run the static power flow mode. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass] required","title":"run_static_pf()"},{"location":"api/#dssdata.tools","text":"","title":"tools"},{"location":"api/#dssdata.tools.lines","text":"","title":"lines"},{"location":"api/#dssdata.tools.lines.get_all_infos","text":"Get some relevant infos from all lines. See [get_infos][dssdata.tools.lines.get_infos]. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass] required Returns: Type Description DataFrame All lines infos","title":"get_all_infos()"},{"location":"api/#dssdata.tools.lines.get_infos","text":"Get some relevant infos from lines. Ex: name bus1 ph_bus1 bus2 ph_bus2 I(A)_bus1_ph_a I(A)_bus1_ph_b I(A)_bus1_ph_c I(A)_bus2_ph_a I(A)_bus2_ph_b I(A)_bus2_ph_c ang_bus1_ph_a ang_bus1_ph_b ang_bus1_ph_c ang_bus2_ph_a ang_bus2_ph_b ang_bus2_ph_c kw_losses kvar_losses emergAmps normAmps perc_NormAmps perc_EmergAmps 0 650632 rg60 abc 632 abc 562.609 419.029 591.793 562.61 419.03 591.794 -28.7 -141.3 93.4 151.3 38.7 -86.6 60.737 196.015 600.0 400.0 1.479 0.986 1 632670 632 abc 670 abc 481.916 218.055 480.313 481.916 218.055 480.313 -27.2 -135.2 99.6 152.8 44.8 -80.4 12.991 41.495 600.0 400.0 1.205 0.803 2 670671 670 abc 671 abc 473.795 188.824 424.942 473.795 188.824 424.942 -27.0 -132.6 101.3 153.0 47.4 -78.7 22.729 72.334 600.0 400.0 1.184 0.79 Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass]. required names List[str] Lines names. required Returns: Type Description DataFrame Lines infos.","title":"get_infos()"},{"location":"api/#dssdata.tools.regs","text":"","title":"regs"},{"location":"api/#dssdata.tools.regs.get_all_taps_number","text":"Get the tap number of all regulators. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass]. required Returns: Type Description DataFrame The tap number of all regulators.","title":"get_all_taps_number()"},{"location":"api/#dssdata.tools.regs.get_tap_number","text":"Get the tap number of regulators. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass]. required names List[str] Regulators names required Returns: Type Description DataFrame The tap number of regulators.","title":"get_tap_number()"},{"location":"api/#dssdata.tools.voltages","text":"","title":"voltages"},{"location":"api/#dssdata.tools.voltages.get_all","text":"Get line to neutral voltages (module and angle) in p.u. and phases configuration from buses. See [get_from_buses][dssdata.tools.voltages.get_from_buses]. Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass]. required Returns: Type Description DataFrame [type]: Line to neutral voltages (module and angle) in p.u. and phases configuration from buses.","title":"get_all()"},{"location":"api/#dssdata.tools.voltages.get_from_buses","text":"Get line to neutral voltages (module and angle) in p.u. and phases configuration from buses. bus_name v_pu_a v_pu_b v_pu_c ang_a ang_b ang_c phases 0 sourcebus 0.99997 0.99999 0.99995 30.0 -90.0 150.0 abc 1 646 NaN 1.01803 1.00026 NaN -122.0 117.8 bc 2 611 NaN NaN 0.96083 NaN NaN 115.7 c 3 652 0.97533 NaN NaN -5.3 NaN NaN a Parameters: Name Type Description Default distSys SystemClass An instance of [SystemClass][dssdata.SystemClass]. required buses List[str] Buses names. required Returns: Type Description DataFrame [type]: Line to neutral voltages (module and angle) in p.u. and phases configuration from buses.","title":"get_from_buses()"},{"location":"gettingstart/createlements/","text":"","title":"Insert your element"},{"location":"gettingstart/createtools/","text":"","title":"Create your tools"},{"location":"gettingstart/gettingstart/","text":"Static Power Flow (Snapshot) from openDSSData import SystemClass from openDSSData.pf_modes import run_static_pf from openDSSData.tools import lines , voltages distSys = SystemClass ( path = \"master.dss\" , kV = 13.8 , loadmult = 1.2 ) run_static_pf ( distSys ) lineDataFrame = lines . get_all_infos ( distSys ) voltageDataFrame = voltages . get_all ( distSys ) Time series Power Flow from openDSSData import SystemClass from openDSSData.pf_modes import cfg_tspf , build_dataset_tspf from openDSSData.tools import lines , voltages distSys = SystemClass ( path = \"master.dss\" , kV = 13.8 , loadmult = 1.2 ) cfg_tspf ( distSys , step_size = \"5m\" , initial_time = ( 0 , 0 )) funcs = [ lines . get_all_infos , voltages . get_all ] [ voltageDataFrame , lineDataFrame ] = build_dataset_tspf ( distSys , funcs_list = funcs , num_steps = 288 )","title":"Getting start"},{"location":"gettingstart/gettingstart/#static-power-flow-snapshot","text":"from openDSSData import SystemClass from openDSSData.pf_modes import run_static_pf from openDSSData.tools import lines , voltages distSys = SystemClass ( path = \"master.dss\" , kV = 13.8 , loadmult = 1.2 ) run_static_pf ( distSys ) lineDataFrame = lines . get_all_infos ( distSys ) voltageDataFrame = voltages . get_all ( distSys )","title":"Static Power Flow (Snapshot)"},{"location":"gettingstart/gettingstart/#time-series-power-flow","text":"from openDSSData import SystemClass from openDSSData.pf_modes import cfg_tspf , build_dataset_tspf from openDSSData.tools import lines , voltages distSys = SystemClass ( path = \"master.dss\" , kV = 13.8 , loadmult = 1.2 ) cfg_tspf ( distSys , step_size = \"5m\" , initial_time = ( 0 , 0 )) funcs = [ lines . get_all_infos , voltages . get_all ] [ voltageDataFrame , lineDataFrame ] = build_dataset_tspf ( distSys , funcs_list = funcs , num_steps = 288 )","title":"Time series Power Flow"},{"location":"gettingstart/ideas/","text":"Actuation functions Tools functions Reduction functions","title":"The main concept"},{"location":"gettingstart/ideas/#actuation-functions","text":"","title":"Actuation functions"},{"location":"gettingstart/ideas/#tools-functions","text":"","title":"Tools functions"},{"location":"gettingstart/ideas/#reduction-functions","text":"","title":"Reduction functions"},{"location":"gettingstart/makedatas/","text":"","title":"Make more with datas"}]}